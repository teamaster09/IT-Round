from datetime import datetime, timedelta
from enum import Enum as PyEnum

from aiogram.types import Message
from sqlalchemy import Enum
from sqlalchemy import create_engine, Column, Integer, String, DateTime, Boolean, Time
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, Session
from sqlalchemy.testing.plugin.plugin_base import logging

SQLALCHEMY_DATABASE_URL = "sqlite:///events.db"

engine = create_engine(
    SQLALCHEMY_DATABASE_URL,
    connect_args={"check_same_thread": False},  # –î–ª—è SQLite
    echo=True  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
)

SessionLocal = sessionmaker(
    autocommit=False,
    autoflush=False,
    bind=engine  # –Ø–≤–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∫ engine
)

Base = declarative_base()

class Weekday(PyEnum):
    MONDAY = "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
    TUESDAY = "–í—Ç–æ—Ä–Ω–∏–∫"
    WEDNESDAY = "–°—Ä–µ–¥–∞"
    THURSDAY = "–ß–µ—Ç–≤–µ—Ä–≥"
    FRIDAY = "–ü—è—Ç–Ω–∏—Ü–∞"
    SATURDAY = "–°—É–±–±–æ—Ç–∞"
    SUNDAY = "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"

    @property
    def display_name(self):
        return self.value


class Event(Base):
    __tablename__ = 'events'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer)
    name = Column(String)
    event_date = Column(DateTime)
    reminder_sent = Column(Boolean, default=False)

class Schedule(Base):
    __tablename__ = 'schedule'
    id = Column(Integer, primary_key=True)
    group = Column(String)         # –ù–∞–ø—Ä–∏–º–µ—Ä, "–ò–¢-41"
    subject = Column(String)       # "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"
    teacher = Column(String)       # "–ò–≤–∞–Ω–æ–≤–∞ –ê.–ü."
    room = Column(String)          # "–ê-105"
    weekday = Column(Enum(Weekday)) # –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    start_time = Column(Time)      # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (14:30)
    end_time = Column(Time)

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


async def create_event(message: Message):
    db = next(get_db())  # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î

    try:
        # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–∏–º–µ—Ä: "–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ –í—Å—Ç—Ä–µ—á–∞ 2023-12-31 15:00")
        parts = message.text.split()
        if len(parts) < 3:
            await message.answer("–§–æ—Ä–º–∞—Ç:[–Ω–∞–∑–≤–∞–Ω–∏–µ] [–¥–∞—Ç–∞] [–≤—Ä–µ–º—è]")
            return

        event_name = parts[0]
        event_date = datetime.strptime(f"{parts[1]} {parts[2]}", "%Y-%m-%d %H:%M")

        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
        new_event = Event(
            user_id=message.from_user.id,
            name=event_name,
            event_date=event_date
        )

        db.add(new_event)
        db.commit()

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú")
    except Exception as e:
        db.rollback()
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è")
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è: {str(e)}")
    finally:
        db.close()
def get_today_schedule(user_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    session = Session()
    today = datetime.now().date()
    events = session.query(Event).filter(
        Event.user_id == user_id,
        Event.event_date >= today,
        Event.event_date < today + timedelta(days=1)
    ).all()
    session.close()
    return format_events(events)

def get_tomorrow_schedule(user_id: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"""
    session = Session()
    tomorrow = datetime.now().date() + timedelta(days=1)
    events = session.query(Event).filter(
        Event.user_id == user_id,
        Event.event_date >= tomorrow,
        Event.event_date < tomorrow + timedelta(days=1)
    ).all()
    session.close()
    return format_events(events)

def format_events(events: list[Event]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –≤ —Ç–µ–∫—Å—Ç"""
    if not events:
        return ""
    return "\n".join(
        f"‚è∞ {e.name} –≤ {e.event_date.strftime('%H:%M')}"
        for e in sorted(events, key=lambda x: x.event_date)
    )


def get_events_for_reminder(start: datetime, end: datetime):
    """–ò—â–µ—Ç —Å–æ–±—ã—Ç–∏—è –≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ —Å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"""
    session = Session()
    try:
        events = session.query(Event).filter(
            Event.event_date >= start,
            Event.event_date <= end,
            Event.reminder_sent == False
        ).all()
        return events
    finally:
        session.close()


def get_week_schedule(user_id: int) -> str:
    session = Session()
    today = datetime.now().date()
    week_later = today + timedelta(days=7)

    events = session.query(Event).filter(
        Event.user_id == user_id,
        Event.event_date >= today,
        Event.event_date <= week_later
    ).order_by(Event.event_date).all()

    session.close()

    if not events:
        return ""

    schedule = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:\n"
    for event in events:
        schedule += f"‚Ä¢ {event.event_date.strftime('%A (%d.%m)')}: {event.name} –≤ {event.event_date.strftime('%H:%M')}\n"

    return schedule