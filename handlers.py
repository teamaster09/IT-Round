from datetime import datetime, timedelta

from aiogram import Router, types, F, Bot
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from sqlalchemy import select
from sqlalchemy.testing.plugin.plugin_base import logging

from database import get_week_schedule, Session, engine, Event, \
    Schedule, SessionLocal, Weekday, get_db, create_event
from reminders import check_reminders

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

class Form(StatesGroup):
    waiting_for_event_data = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–¥–ª—è /start –∏ /help)
async def show_main_menu(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è"), types.KeyboardButton(text="üìÜ –ó–∞–≤—Ç—Ä–∞")],
            [types.KeyboardButton(text="üóì –ù–µ–¥–µ–ª—è"), types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å")],
            [types.KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )
    help_text = (
        "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/today - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/tomorrow - –ù–∞ –∑–∞–≤—Ç—Ä–∞\n"
        "/week - –ù–∞ –Ω–µ–¥–µ–ª—é\n"
        "/add - –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ\n\n"
        "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá"
    )
    await message.answer(help_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(CommandStart())
@router.message(Command("start"))
@router.message(Command("help"))
@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def handle_start_help(message: types.Message):
    await show_main_menu(message)

@router.message(Command("today", "tomorrow"))
@router.message(F.text.in_(["üìÖ –°–µ–≥–æ–¥–Ω—è", "üìÜ –ó–∞–≤—Ç—Ä–∞"]))
async def handle_daily_schedule(message: Message):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–Ω—è –¥–ª—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã–∑–æ–≤–∞
    if (message.text == "üìÖ –°–µ–≥–æ–¥–Ω—è" or
            isinstance(message.text, str) and message.text.startswith('/today')):
        day_type = "today"
    elif (message.text == "üìÜ –ó–∞–≤—Ç—Ä–∞" or
          isinstance(message.text, str) and message.text.startswith('/tomorrow')):
        day_type = "tomorrow"
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
        return

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
    db = SessionLocal()
    try:
        schedule = await get_daily_schedule(day_type, db)

        if schedule:
            await message.answer(schedule, parse_mode="HTML",  reply_markup=get_main_keyboard())
        else:
            await message.answer("–ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç",  reply_markup=get_main_keyboard())
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",  reply_markup=get_main_keyboard())
        logging.error(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        db.close()  # –í–∞–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é

@router.message(Command("week"))
@router.message(F.text == "üóì –ù–µ–¥–µ–ª—è")
async def handle_week_schedule(message: Message):
    db = SessionLocal()
    try:
        schedule = await get_week_schedule(db)

        if schedule:
            for i in range(0, len(schedule), 4000):
                await message.answer(schedule[i:i + 4000], parse_mode="HTML",  reply_markup=get_main_keyboard())
        else:
            await message.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",  reply_markup=get_main_keyboard())
        logging.error(f"–û—à–∏–±–∫–∞: {str(e)}")
    finally:
        db.close()

async def get_daily_schedule(day: str, db: Session) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        target_date = datetime.now()
        if day == "tomorrow":
            target_date += timedelta(days=1)

        weekday_en = target_date.strftime("%A")
        weekdays_map = {
            "Monday": Weekday.MONDAY,
            "Tuesday": Weekday.TUESDAY,
            "Wednesday": Weekday.WEDNESDAY,
            "Thursday": Weekday.THURSDAY,
            "Friday": Weekday.FRIDAY,
            "Saturday": Weekday.SATURDAY,
            "Sunday": Weekday.SUNDAY
        }
        weekday = weekdays_map.get(weekday_en)

        if not weekday:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏"

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º enum)
        schedules = db.execute(
            select(Schedule)
            .where(Schedule.weekday == weekday)  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å enum!
            .order_by(Schedule.group, Schedule.start_time)
        ).scalars().all()

        if not schedules:
            return None

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        message = f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {weekday.display_name}:\n\n"
        current_group = None

        for item in schedules:
            if item.group != current_group:
                message += f"üë• <b>–ì—Ä—É–ø–ø–∞ {item.group}</b>:\n"
                current_group = item.group

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π None –≤ –≤—Ä–µ–º–µ–Ω–∏
            start = item.start_time.strftime('%H:%M') if item.start_time else "??:??"
            end = item.end_time.strftime('%H:%M') if item.end_time else "??:??"

            message += (
                f"üïí {start}-{end} "
                f"{item.subject} ({item.room}, {item.teacher})\n"
            )

        return message

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")
        return None


async def get_week_schedule(db: Session) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é"""
    try:
        weekdays = [
            Weekday.MONDAY,
            Weekday.TUESDAY,
            Weekday.WEDNESDAY,
            Weekday.THURSDAY,
            Weekday.FRIDAY,
            Weekday.SATURDAY,
            Weekday.SUNDAY
        ]
        messages = []

        for day in weekdays:
            schedules = db.execute(
                select(Schedule)
                .where(Schedule.weekday == day)  # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å enum
                .order_by(Schedule.group, Schedule.start_time)
            ).scalars().all()

            if not schedules:
                messages.append(f"üìÖ {day.display_name}: –ó–∞–Ω—è—Ç–∏–π –Ω–µ—Ç\n")
                continue

            day_message = f"üìÖ <b>{day.display_name}</b>:\n\n"
            current_group = None

            for item in schedules:
                if item.group != current_group:
                    day_message += f"üë• <b>–ì—Ä—É–ø–ø–∞ {item.group}</b>:\n"
                    current_group = item.group

                day_message += (
                    f"üïí {item.start_time.strftime('%H:%M')}-{item.end_time.strftime('%H:%M')} "
                    f"{item.subject} ({item.room}, {item.teacher})\n"
                )

            messages.append(day_message)

        return "\n".join(messages)

    finally:
        db.close()

@router.message(Command("add"))
@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
async def handle_add_event(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ –î–∞—Ç–∞ –í—Ä–µ–º—è\n–ü—Ä–∏–º–µ—Ä: –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è 2025-07-13 15:00")
    await state.set_state(Form.waiting_for_event_data)

@router.message(Form.waiting_for_event_data)
async def process_event_data(message: types.Message, state: FSMContext):
    db = next(get_db())
    args = message.text.split()
    if len(args) < 3:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –§–æ—Ä–º–∞—Ç: –ù–∞–∑–≤–∞–Ω–∏–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n(–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞)\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",  reply_markup=get_main_keyboard())
        return

    try:
        await create_event(message)
        await message.answer(f"‚úÖ –°–æ–±—ã—Ç–∏–µ '{args[0]}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ {args[1]} {args[2]}!",  reply_markup=get_main_keyboard())
        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",  reply_markup=get_main_keyboard())

def get_main_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è"), types.KeyboardButton(text="üìÜ –ó–∞–≤—Ç—Ä–∞")],
            [types.KeyboardButton(text="üóì –ù–µ–¥–µ–ª—è"), types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å")]
        ],
        resize_keyboard=True,
        persistent = True  # –ö–ª—é—á–µ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä!
    )

@router.message(Command("debug_db"))
async def debug_db(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    with Session(engine) as session:
        events = session.query(Event).all()
        for e in events:
            await message.answer(f"{e.name} –≤ {e.event_date.strftime('%d.%m.%Y %H:%M')}")
        # –°–µ—Å—Å–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä–æ–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –±–ª–æ–∫–∞ with

@router.message(Command("force_check"))
async def force_check(message: types.Message, bot: Bot):  # –î–æ–±–∞–≤–ª—è–µ–º bot –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    await check_reminders(bot)
    await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")


@router.message(Command("schedule"))
async def handle_schedule_info(message: types.Message):
    await message.answer("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏...")